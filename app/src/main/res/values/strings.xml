<resources>
    <string name="app_name">Marlow Music</string>
    <string name="AlbumsPageTitle">The page to display the Albums in the Library.\n</string>
    <string name="ArtistsPageTitle">The page to display the Artists in the Library.\n</string>
    <string name="PlayingPageTitle">The page to display the current song playing, along with its attributes.\n</string>
    <string name="SongsPageTitle">The page to display the Songs in the Library.\n</string>
    <string name="RandomPageTitle">The page that directly plays a random song.\n</string>

    <string name="AlbumsPageDescription">This activity will search the songs on the users device using several Java and Android methods. For java these include: ArrayList, Collections, Comparator. For android these include: Uri, ContentResolver, Cursor, ListView. Using the ContentResolver, URI, and Cursor, the files on the internal storage can be pulled from the “android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, and then sorted into a list with attributes such as Title, Artist, Album, and song_ID. Next, using the Collections method, that list attained prior can be sorted based on Artist, Album, Song, etc.\n\n

For this particular activity, we’ll sort them by Albums. The list will still include every song available, but the songs will be grouped by Album to be easier to find.\n\n

With that list, an Adapter instance will be called to map this now-sorted list to a ListView in the XML. Each of these attributes will have an onClick that will call the playing method and will pass the attributes of the clicked item to it.\n\n

    The actual playing of the song will use the Java method, ArrayList, along with the Android methods of: ContentUris, AudioManager, MediaPlayer, URI, Binder, PowerManager. This activity will revolve around a created class that extends Services, and implements several submethods of MediaPlayer. The Service will need to be started and allow the song to play for the duration. Additional Android methods will need to be imported: IBinder, ComponentName, Context, Intent, ServiceConnection. The service must be started, and then we must bind it to the music player to take affect. Additionally, some extra lines should be added to the music player to allow the service to continue in the background even when the phone becomes idle (using the PowerManager), along with several lines to free up the system resources once the music stops and we unbind the service. As this is set up, the music will only be able to be played and stopped, where upon starting it back would start it at the beginning of the song again.

    \n\nNote on References: This general outline is based largely on a 3-part tutorial found on the internet from a Google search. Diligence was spent to not copy any portion and simply use the idea but the general direction used with the tutorial is followed here and throughout the app. There are multiple differences in the end-function of how this app is to function and the one demonstrated in the article, but the overall approach is the same. Should this be deemed unethical to use this, please let me know and I will alter this as needed. \n\n
        Tutorial Article #1: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764\n
        Tutorial Article #2: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-song-playback--mobile-22778

    </string>

    <string name="ArtistsPageDescription">This activity will search the songs on the users device using several java and android methods. For java these include: ArrayList, Collections, Comparator. For android these include: Uri, ContentResolver, Cursor, ListView. Using the ContentResolver, URI, and Cursor, the files on the internal storage can be pulled from the “android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, and then sorted into a list with attributes such as Title, Artist, Album, and song_ID. Next, using the Collections method, that list attained prior can be sorted based on Artist, Album, Song, etc.\n\n

For this particular activity, we’ll sort them by Artists. The list will still include every song available, but the songs will be grouped by Artist to be easier to find.\n\n

With that list, an Adapter instance will be called to map this now-sorted list to a ListView in the XML. Each of these attributes will have an onClick that will call the playing method and will pass the attributes of the clicked item to it.\n\n

    The actual playing of the song will use the Java method, ArrayList, along with the Android methods of: ContentUris, AudioManager, MediaPlayer, URI, Binder, PowerManager. This activity will revolve around a created class that extends Services, and implements several submethods of MediaPlayer. The Service will need to be started and allow the song to play for the duration. Additional Android methods will need to be imported: IBinder, ComponentName, Context, Intent, ServiceConnection. The service must be started, and then we must bind it to the music player to take affect. Additionally, some extra lines should be added to the music player to allow the service to continue in the background even when the phone becomes idle (using the PowerManager), along with several lines to free up the system resources once the music stops and we unbind the service. As this is set up, the music will only be able to be played and stopped, where upon starting it back would start it at the beginning of the song again.

    \n\nNote on References: This general outline is based largely on a 3-part tutorial found on the internet from a Google search. Diligence was spent to not copy any portion and simply use the idea but the general direction used with the tutorial is followed here and throughout the app. There are multiple differences in the end-function of how this app is to function and the one demonstrated in the article, but the overall approach is the same. Should this be deemed unethical to use this, please let me know and I will alter this as needed. \n\n
        Tutorial Article #1: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764\n
        Tutorial Article #2: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-song-playback--mobile-22778</string>

    <string name="PlayingPageDescription">This activity will use the Java method, ArrayList, along with the Android methods of: ContentUris, AudioManager, MediaPlayer, URI, Binder, PowerManager. This activity will revolve around a created class that extends Services, and implements several submethods of MediaPlayer. The Service will need to be started and allow the song to play for the duration. Additional Android methods will need to be imported: IBinder, ComponentName, Context, Intent, ServiceConnection. The service must be started, and then we must bind it to the music player to take affect. Additionally, some extra lines should be added to the music player to allow the service to continue in the background even when the phone becomes idle (using the PowerManager), along with several lines to free up the system resources once the music stops and we unbind the service. As this is set up, the music will only be able to be played and stopped, where upon starting it back would start it at the beginning of the song again.

        \n\nNote on References: This general outline is based largely on a 3-part tutorial found on the internet from a Google search. Diligence was spent to not copy any portion and simply use the idea but the general direction used with the tutorial is followed here and throughout the app. There are multiple differences in the end-function of how this app is to function and the one demonstrated in the article, but the overall approach is the same. Should this be deemed unethical to use this, please let me know and I will alter this as needed. \n\n
        Tutorial Article #1: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764\n
        Tutorial Article #2: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-song-playback--mobile-22778
</string>

    <string name="SongsPageDescription">This activity will search the songs on the users device using several java and android methods. For java these include: ArrayList, Collections, Comparator. For android these include: Uri, ContentResolver, Cursor, ListView. Using the ContentResolver, URI, and Cursor, the files on the internal storage can be pulled from the “android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, and then sorted into a list with attributes such as Title, Artist, Album, and song_ID. Next, using the Collections method, that list attained prior can be sorted based on Artist, Album, Song, etc.\n\n

For this particular activity, we’ll sort them by Title.\n\n

With that list, an Adapter instance will be called to map this now-sorted list to a ListView in the XML. Each of these attributes will have an onClick that will call the playing method and will pass the attributes of the clicked item to it.\n\n

    The actual playing of the song will use the Java method, ArrayList, along with the Android methods of: ContentUris, AudioManager, MediaPlayer, URI, Binder, PowerManager. This activity will revolve around a created class that extends Services, and implements several submethods of MediaPlayer. The Service will need to be started and allow the song to play for the duration. Additional Android methods will need to be imported: IBinder, ComponentName, Context, Intent, ServiceConnection. The service must be started, and then we must bind it to the music player to take affect. Additionally, some extra lines should be added to the music player to allow the service to continue in the background even when the phone becomes idle (using the PowerManager), along with several lines to free up the system resources once the music stops and we unbind the service. As this is set up, the music will only be able to be played and stopped, where upon starting it back would start it at the beginning of the song again.

    \n\nNote on References: This general outline is based largely on a 3-part tutorial found on the internet from a Google search. Diligence was spent to not copy any portion and simply use the idea but the general direction used with the tutorial is followed here and throughout the app. There are multiple differences in the end-function of how this app is to function and the one demonstrated in the article, but the overall approach is the same. Should this be deemed unethical to use this, please let me know and I will alter this as needed. \n\n
        Tutorial Article #1: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764\n
        Tutorial Article #2: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-song-playback--mobile-22778</string>

    <string name="RandomPageDescription">This activity will search the songs on the users device using several java and android methods. For java these include: ArrayList, Collections, Comparator. For android these include: Uri, ContentResolver, Cursor, ListView. Using the ContentResolver, URI, and Cursor, the files on the internal storage can be pulled from the “android.provider.MediaStore.Audio.Media.EXTERNAL_CONTENT_URI, and then sorted into a list with attributes such as Title, Artist, Album, and song_ID. Next, using the Collections method, that list attained prior can be sorted based on Artist, Album, Song, etc. \n\n

For this particular activity, we’ll sort them by song_ID, but unlike other activities, this list will not be displayed to the user. Instead, a random number will be generated using the Android method Random that is anywhere between the length of this list. That random number will then be used to index to a certain song_ID in the list that has been sorted. To the user, the clicking of the Random button will start playing immediately.\n\n

    The actual playing of the song will use the Java method, ArrayList, along with the Android methods of: ContentUris, AudioManager, MediaPlayer, URI, Binder, PowerManager. This activity will revolve around a created class that extends Services, and implements several submethods of MediaPlayer. The Service will need to be started and allow the song to play for the duration. Additional Android methods will need to be imported: IBinder, ComponentName, Context, Intent, ServiceConnection. The service must be started, and then we must bind it to the music player to take affect. Additionally, some extra lines should be added to the music player to allow the service to continue in the background even when the phone becomes idle (using the PowerManager), along with several lines to free up the system resources once the music stops and we unbind the service. As this is set up, the music will only be able to be played and stopped, where upon starting it back would start it at the beginning of the song again.

        \n\nNote on References: This general outline is based largely on a 3-part tutorial found on the internet from a Google search. Diligence was spent to not copy any portion and simply use the idea but the general direction used with the tutorial is followed here and throughout the app. There are multiple differences in the end-function of how this app is to function and the one demonstrated in the article, but the overall approach is the same. Should this be deemed unethical to use this, please let me know and I will alter this as needed. \n\n
        Tutorial Article #1: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-project-setup--mobile-22764\n
        Tutorial Article #2: https://code.tutsplus.com/tutorials/create-a-music-player-on-android-song-playback--mobile-22778

    </string>

</resources>
